@page "/docs/checkin/{Id:int}"
@attribute [Authorize(Roles = "Admin, Archive")]

@using MW.Blazor
@using DAS.Models
@using DAS.ViewModels
@using DAS.Services
@using Blazor.FileReader
@using System.IO;
@using System.Diagnostics

@inject IFileReaderService fileReaderService

@inject IAdminService adminService
@inject IListsService listsService
@inject IArchiveService arcService
@inject ICurrentUserService currentUserService
@inject IToastService toastService
@inject IJSRuntime JSRuntime

@if (currentUser != null && Doc != null && Repo != null && (currentUser.IsAdmin || currentUser.Repositories.Contains(Repo.Id)))
{
    <div class="card text-left">
        <div class="jumbotron jumbotron-fluid">
            <div class="container-fluid">
                <h1 class="display-4">@LocalService.Get("Upload Document", currentUser.Lang)</h1>
                <p>@LocalService.Get("Repository", currentUser.Lang): @Repo.Name</p>
            </div>
        </div>
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-item nav-link active" id="nav-upload-tab" data-toggle="tab" href="#nav-upload" role="tab" aria-controls="nav-upload" aria-selected="true">@LocalService.Get("Upload", currentUser.Lang)</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-upload" role="tabpanel" aria-labelledby="nav-upload-tab">
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="form-group">
                                    <label for="parentName">@LocalService.Get("Parent Folder", currentUser.Lang)</label>
                                    <input readonly id="parentName" class="form-control" value="@Doc.Parent" />
                                </div>
                                <div class="form-group">
                                    <label for="uploadFile">@LocalService.Get("Select File", currentUser.Lang)</label>
                                    <input type="file" @ref=inputElement class="form-control" />
                                </div>
                                <div class="form-group">
                                    <label for="title">@LocalService.Get("Title", currentUser.Lang)</label>
                                    <input @bind="documentModel.Title" class="form-control" />
                                </div>

                                <div class="form-group">
                                    <label for="description">@LocalService.Get("Description", currentUser.Lang)</label>
                                    <textarea rows="3" class="form-control" @bind="documentModel.Description"></textarea>
                                </div>

                                @if (documentModel != null && documentModel.Meta != null && MetaFields != null)
                                {
                                    foreach (var meta in documentModel.Meta.OrderBy(x => x.Key))
                                    {
                                        var field = MetaFields.FirstOrDefault(x => x.Name == meta.Key);
                                        if (field != null)
                                        {
                                            <div class="form-group">
                                                <label for="meta_@field.Id">@field.Title</label>
                                                <input @bind="documentModel.Meta[meta.Key]" class="form-control" />
                                            </div>
                                        }
                                    }
                                }

                                <div class="form-group">
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @(progress)%;" aria-valuenow="@(value)" aria-valuemin="0" aria-valuemax="100"> @($"{progress:00}")%</div>
                                    </div>
                                    @*<progress max="@max" value="@value" />*@
                                    <br />
                                    <textarea style="max-width: 100%;" cols="50" rows="20">@Output</textarea>
                                </div>
                                <button @onclick=ReadFile class="btn btn-primary">@LocalService.Get("Check In", currentUser.Lang)</button>
                                <a href="doc/details/@documentModel.DocumentId" class="btn btn-success @gotoDocumentEnabled">@LocalService.Get("Go To Document", currentUser.Lang)</a>
                                <button @onclick=ClearFile class="btn btn-primary">@LocalService.Get("Reset", currentUser.Lang)</button>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {

    [Parameter]
    public int Id { get; set; }

    private RepoDetailModel Repo { get; set; } = new RepoDetailModel();
    private DocumentDetailModel Doc { get; set; }
    private UploadDocumentViewModel documentModel = new UploadDocumentViewModel();
    private AppUser currentUser;
    private IEnumerable<MetaField> MetaFields;

    [Parameter]
    public int BufferSize { get; set; } = 20480;

    public long max;
    public long value;
    public decimal progress;
    public int chunkNo = 1;
    ElementReference inputElement;
    private string gotoDocumentEnabled = "disabled";

    string Output { get; set; }

    public async Task ClearFile()
    {
        await fileReaderService.CreateReference(inputElement).ClearValue();
        max = 0;
        value = 0;
        Output = string.Empty;
        progress = 0;
        chunkNo = 1;
        gotoDocumentEnabled = "disabled";
        CreateUploadModel();
    }

    public async Task ReadFile()
    {
        max = 0;
        value = 0;
        Output = string.Empty;
        progress = 0;
        chunkNo = 1;
        long remainingBytes = 0;
        gotoDocumentEnabled = "disabled";

        this.StateHasChanged();
        var nl = Environment.NewLine;
        var files = (await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync()).ToList();
        if (files == null || files.Count == 0)
        {
            toastService.ShowError("Please select a file to upload");
            return;
        }

        var file = files.FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        max += fileInfo.Size;

        // Upload the document first
        documentModel.Name = fileInfo.Name;
        documentModel.ContentType = fileInfo.Type;
        documentModel.Size = fileInfo.Size;

        var uploadDocResult = await arcService.UploadDocumentForCheckIn(documentModel);

        if (!uploadDocResult.IsOk)
        {
            this.StateHasChanged();
            toastService.ShowError(uploadDocResult.ErrorMessage);
            return;
        }

        documentModel.DocumentId = uploadDocResult.DocumentId;
        documentModel.Version = uploadDocResult.Version;
        documentModel.UploadPath = uploadDocResult.Path;

        // Start uploading file
        var stopwatch = new Stopwatch();
        stopwatch.Start();

        Output += $"File Name: {fileInfo.Name}{nl}";
        Output += $"File Size: {fileInfo.Size}{nl}";
        Output += $"File Type: {fileInfo.Type}{nl}";
        Output += $"File Last Modified Date: {fileInfo.LastModifiedDate?.ToString() ?? "(N/A)"}{nl}";
        Output += $"Reading file...";

        if (fileInfo.Size < BufferSize)
            BufferSize = (int)fileInfo.Size;


        this.StateHasChanged();
        Console.WriteLine(Output);

        using (var fs = await file.OpenReadAsync())
        {
            var buffer = new byte[BufferSize];
            remainingBytes = fileInfo.Size;
            int count;
            var lastAnnounce = 0m;
            while ((count = await fs.ReadAsync(buffer, 0, buffer.Length)) != 0)
            {
                var chunk = new UploadDocumentChunkViewModel();

                chunk.DocumentId = documentModel.DocumentId;
                chunk.Version = documentModel.Version;
                chunk.ChunkNo = chunkNo;
                chunk.ChunkSize = count;
                chunk.RepositoryId = documentModel.RepositoryId;
                chunk.Storage = documentModel.Storage;
                chunk.Path = uploadDocResult.Path;
                chunk.ParentId = documentModel.ParentId;
                chunk.FileName = fileInfo.Name;
                chunk.ContentType = fileInfo.Type;
                chunk.Size = fileInfo.Size;
                chunk.UserName = documentModel.UserName;

                chunk.Bytes = buffer;

                var r = await arcService.UploadDocumentChunk(chunk);
                if (!r.IsOk)
                {
                    this.StateHasChanged();
                    toastService.ShowError(r.ErrorMessage);

                    return;
                }

                chunkNo++;
                value += count;

                if (fileInfo.Size - value < BufferSize)
                {
                    BufferSize = (int)(fileInfo.Size - value);
                    buffer = new byte[BufferSize];
                }

                progress = ((decimal)fs.Position * 100) / fs.Length;
                if (progress > (lastAnnounce + 10))
                {
                    stopwatch.Stop();
                    Output += $"Read {count} bytes ({progress:00}%). {fs.Position} / {fs.Length}{nl}";
                    this.StateHasChanged();
                    lastAnnounce = progress;
                    stopwatch.Start();
                }
            }
            stopwatch.Stop();
            Output += $"Done reading file {fileInfo.Name} - {fs.Length} bytes in {stopwatch.ElapsedMilliseconds}ms.{nl}.";
            toastService.ShowSuccess($"Uploaded document {fileInfo.Name} successfully!");
            gotoDocumentEnabled = string.Empty;

        }
        this.StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        currentUser = await currentUserService.GetCurrentUserAsync();
        Doc = await listsService.GetDocumentById(Id);

        Repo = await listsService.GetRepositoryById(Doc.RepositoryId.ToString());
        MetaFields = await listsService.GetMetaFieldsList();


        CreateUploadModel();
    }

    protected void CreateUploadModel()
    {
        documentModel = new UploadDocumentViewModel()
        {
            DocumentId = Doc.Id,
            Version = Doc.Version,
            RepositoryId = Repo.Id,
            ParentId = Doc.ParentId,
            Storage = Repo.Storage,
            UserName = currentUser.UserName,
            ContentType = Doc.ContentType,
            Description = Doc.Description,
            Name = Doc.Name,
            Size = Doc.Length,
            Title = Doc.Title,
            UploadPath = null
        };


        SetMeta();
    }

    protected void SetMeta()
    {
        documentModel.Meta = new Dictionary<string, string>();
        foreach (var item in Doc.Meta)
        {
            documentModel.Meta[item.Key] = item.Value;
        }
    }
}

@page "/users"

@using DAS.ViewModels
@using DAS.Services
@using Microsoft.AspNetCore.Identity

@inject IIdentityService identService
@inject IListsService listsService
@inject Microsoft.AspNetCore.Identity.UserManager<IdentityUser> userManager
@inject IToastService toastService


<AuthorizeView Roles="Admin">
    <h3>Users</h3>
    <div class="row mb-3">
        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    <EditForm Context="formContext" Model="UserModel" OnValidSubmit="OnValidSubmit">
                        <div class="form-inline">
                            <div class="form-group mb-2">
                                <label for="inputUserName" class="sr-only">User Name</label>
                                <input @bind="UserModel.UserName" class="form-control" id="inputUserName" placeholder="User Name">
                            </div>
                            <div class="form-group mx-sm-3 mb-2">
                                <label for="inputEmail" class="sr-only">Email</label>
                                <input @bind="UserModel.Email" type="email" class="form-control" id="inputEmail" placeholder="Email">
                            </div>
                            <button type="submit" class="btn btn-success mb-2">Add User</button>
                        </div>
                    </EditForm>

                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    @if (AppUsers == null)
                    {
                        <p>Loading...</p>
                    }
                    else
                    {
                        <table class="table">
                            <thead class="thead-light">
                                <tr>
                                    <th>User Name</th>
                                    <th>Admin</th>
                                    <th>Archive</th>
                                    <th>Public</th>
                                    <th>Repositories</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in AppUsers)
                                {
                                    <tr class="@(user == CurrentUser ? "bg-info text-light" : "")">
                                        <td>@user.UserName</td>
                                        @if (user.IsAdmin)
                                        {
                                            <td><a class="text-success" @onclick="(() => RemoveFromRole(user.UserName, Constants.ROLE_ADMIN))"><i class="oi oi-check"></i></a></td>
                                        }
                                        else
                                        {
                                            <td><a class="text-danger" @onclick="(() => AddToRole(user.UserName, Constants.ROLE_ADMIN))"><i class="oi oi-x"></i></a></td>
                                        }
                                        @if (user.IsArchive)
                                        {
                                            <td><a class="text-success" @onclick="(() => RemoveFromRole(user.UserName, Constants.ROLE_ARCHIVE))"><i class="oi oi-check"></i></a></td>
                                        }
                                        else
                                        {
                                            <td><a class="text-danger" @onclick="(() => AddToRole(user.UserName, Constants.ROLE_ARCHIVE))"><i class="oi oi-x"></i></a></td>
                                        }
                                        @if (user.IsPublic)
                                        {
                                            <td><a class="text-success" @onclick="(() => RemoveFromRole(user.UserName, Constants.ROLE_PUBLIC))"><i class="oi oi-check"></i></a></td>
                                        }
                                        else
                                        {
                                            <td><a class="text-danger" @onclick="(() => AddToRole(user.UserName, Constants.ROLE_PUBLIC))"><i class="oi oi-x"></i></a></td>
                                        }
                                        <td>
                                            <a class="btn-link" style="cursor:pointer;" @onclick="(() => SelectUser(user))"><i class="oi oi-box"></i></a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>

        <div class="col-6">
            @if (Repositories != null && Repositories.Count > 0 && CurrentUser != null)
            {
            <div class="card">
                <div class="card-body">
                    <div class="card-title">@CurrentUser.UserName Repositories</div>
                    <EditForm Context="from" Model="CurrentUser" OnValidSubmit="OnAddRepo">
                        <div class="form-inline">
                            <div class="form-group mb-2">
                                <label for="inputRepoToAdd" class="sr-only">Repository</label>
                                <InputSelect @bind-Value="CurrentUser.RepoToAdd" class="form-control" id="inputRepoToAdd">
                                    <option value=""> -- Select Repository -- </option>
                                    @foreach (var item in Repositories.Where(x => !CurrentUser.Repositories.Contains(x.Key)))
                                        {
                                        <option value="@item.Key.ToString()">@item.Value</option>
                                        }
                                </InputSelect>
                            </div>
                            <button type="submit" class="btn btn-success mx-2 mb-2">Add</button>
                        </div>
                    </EditForm>
                    <table class="table mt-2">
                        <thead class="thead-dark">
                            <tr>
                                <th>Repository</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var repoId in CurrentUser.Repositories)
                            {
                                <tr>
                                    <td>@Repositories[repoId]</td>
                                    <td><a @onclick="@(() => OnRemoveRepo(repoId))" class="btn-link text-danger" style="cursor: pointer;"><i class="oi oi-trash"></i></a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            }
        </div>
    </div>
</AuthorizeView>


@code {

    public List<AppUser> AppUsers { get; set; }

    private CreateUserModel UserModel { get; set; } = new CreateUserModel();

    private Dictionary<int, string> Repositories { get; set; } = new Dictionary<int, string>();

    private AppUser CurrentUser { get; set; } = new AppUser();

    public void SelectUser(AppUser user)
    {
        CurrentUser = user;
        if(CurrentUser != null)
        {
            CurrentUser.RepoToAdd = null;
        }
    }

    public async Task OnAddRepo()
    {
        if(CurrentUser != null && !string.IsNullOrEmpty(CurrentUser.RepoToAdd))
        {
            var user = await userManager.FindByIdAsync(CurrentUser.Id);
            if(user != null)
            {
                var claims = await userManager.GetClaimsAsync(user);
                if(!claims.Any(x => x.Type == "RepositoryId" && x.Value == CurrentUser.RepoToAdd))
                {

                    await userManager.AddClaimAsync(user, new System.Security.Claims.Claim("RepositoryId", CurrentUser.RepoToAdd));
                    await LoadUsers(CurrentUser.Id);
                }
            }
        }
    }

    public async Task OnRemoveRepo(int repoId)
    {
        if(CurrentUser != null)
        {
            var user = await userManager.FindByIdAsync(CurrentUser.Id);
            if(user != null)
            {
                var claims = await userManager.GetClaimsAsync(user);
                if(claims.Any(x => x.Type == "RepositoryId" && x.Value == repoId.ToString()))
                {

                    await userManager.RemoveClaimAsync(user, new System.Security.Claims.Claim("RepositoryId", repoId.ToString()));
                    await LoadUsers(CurrentUser.Id);
                }
            }
        }
    }

    public async Task LoadUsers(string userId = null)
    {
        UserModel = new CreateUserModel();
        Repositories = (await listsService.GetRepositoryList()).ToDictionary(x => x.Id, y => y.Name);
        AppUsers = await identService.GetUsersAsync().ConfigureAwait(false);
        if (userId == null)
        {
            CurrentUser = AppUsers.FirstOrDefault();
        }
        else
        {
            CurrentUser = AppUsers.FirstOrDefault(x => x.Id == userId);

        }

        if (CurrentUser != null)
        {
            CurrentUser.RepoToAdd = null;
        }

    }

    public async Task OnValidSubmit()
    {
        var user = await identService.CreateUserAsync(UserModel?.UserName, UserModel?.Email).ConfigureAwait(false);
        if(user == null)
        {
            toastService.ShowError("Adding user failed", "Error");
        }
        else
        {
            toastService.ShowSuccess($"User {UserModel?.UserName} added successfully", "Success");
            await LoadUsers().ConfigureAwait(false);
        }

    }

    public async Task AddToRole(string userName, string role)
    {
        var result = await identService.AddUserRoleAsync(userName, role).ConfigureAwait(false);
        if(!result)
        {
            toastService.ShowError($"Failed to add user {userName} to {role} role", "Error");
        }
        else
        {
            toastService.ShowSuccess($"User {userName} added to {role} role successfully", "Success");
            await LoadUsers().ConfigureAwait(false);
        }
    }

    public async Task RemoveFromRole(string userName, string role)
    {
        var result = await identService.RemoveUserRoleAsync(userName, role).ConfigureAwait(false);
        if(!result)
        {
            toastService.ShowError($"Failed to remove user {userName} from {role} role", "Error");
        }
        else
        {
            toastService.ShowSuccess($"User {userName} removed from {role} role successfully", "Success");
            await LoadUsers().ConfigureAwait(false);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers().ConfigureAwait(false);
    }
}

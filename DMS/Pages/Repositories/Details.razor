@page "/repo/{id:int}"
@attribute [Authorize(Roles = "Admin")]

@using DAS.ViewModels
@using DAS.Services
@using DAS.Models
@using MW.Blazor

@inject IAdminService adminService
@inject IListsService listsService
@inject ICurrentUserService currentUserService
@inject IToastService toastService

<h3>Repository: @Repo.Name</h3>
<small class="text-secondary font-italic">created on @Repo.CreatedOn.ToString("dd-MM-yyyy") by @Repo.CreatedBy, last update on @Repo.UpdatedOn.ToString("dd-MM-yyyy hh:mm") by @Repo.UpdatedBy</small>

<div class="row">
    <div class="col-6">
        <div class="card">
            <div class="card-body">
                <div class="card-title"><h5>@Repo.Title</h5></div>
                <div class="card-text">@Repo.Description</div>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item">Storage: <span class="font-weight-bold">@Repo.Storage.ToString()</span></li>
            </ul>
        </div>
    </div>
</div>

<div class="row mt-3 d-flex flex-grow-1">
    <div class="col-6 d-flex flex-column flex-grow-1">
        <div class="card d-flex flex-grow-1 flex-column">
            <div class="card-body">
                <div class="card-title"><h5>Meta Fields</h5></div>
                <div class="mb-2">
                    <EditForm Context="formRepoMetaContext" Model="Item" OnValidSubmit="OnValidSetValue">
                        <div class="form-inline">
                            <div class="form-group mx-sm-3 mb-2">
                                <label for="id_name" class="sr-only">Storage Type</label>
                                <InputSelect @bind-Value="Item.Name" class="form-control" id="id_name">
                                    @if (Fields == null)
                                    {
                                        <option></option>
                                    }
                                    else
                                    {
                                        foreach (var group in Fields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                        {
                                            <optgroup label="@group">
                                                @foreach (var field in Fields.Where(x => group == x.Group).OrderBy(x => x.Name))
                                                {
                                                    <option value="@field.Name">@field.Title</option>
                                                }

                                            </optgroup>
                                        }
                                    }

                                </InputSelect>
                            </div>
                            <div class="form-group mb-2">
                                <label for="id_value" class="sr-only">Field Value</label>
                                <InputText @bind-Value="Item.Value" class="form-control" id="id_value" placeholder="Field Value"></InputText>
                            </div>
                            <button type="submit" class="btn btn-success mx-2 mb-2">Set Value</button>
                        </div>
                    </EditForm>
                </div>
                @if (ActiveFields != null)
                {
                    <table class="table table-bordered table-sm col-6">
                        <tbody>
                            @foreach (var group in ActiveFields.Select(x => x.Group).Distinct().OrderBy(x => x))
                            {
                                <tr class="bg-dark text-white d-flex">
                                    <td class="col-12">@group</td>
                                </tr>
                                @foreach (var meta in ActiveFields.Where(x => x.Group == group).OrderBy(x => x.Name))
                                {
                                    <tr class="d-flex">
                                        <td class="bg-light col-6">@meta.Title</td>
                                        <td class="col-6">@Repo.Meta[meta.Name]</td>
                                    </tr>
                                }

                            }
                        </tbody>
                    </table>
                }
            </div>

        </div>

    </div>
    <div class="col-6 d-flex flex-column flex-grow-1">
        <div class="card d-flex flex-grow-1 flex-column">
            <div class="card-body">
                <div class="card-title"><h5>Folders</h5></div>
                @if (TreeItems != null)
                {
                    <Tree Nodes="@TreeItems" ChildSelector="@(item => item.Childs)" @bind-SelectedNode="selectedNode" @bind-ExpandedNodes="ExpandedNodes" HasChildNodes="@(item => item.Childs?.Any() == true)">
                        <TitleTemplate>@context.Name</TitleTemplate>
                    </Tree>
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private RepoDetailModel Repo { get; set; } = new RepoDetailModel();

    private MetaItemEditModel Item { get; set; } = new MetaItemEditModel();

    private IEnumerable<MetaField> Fields;

    private IEnumerable<MetaField> ActiveFields => Fields?.Where(x => Repo != null && Repo.Meta != null && Repo.Meta.ContainsKey(x.Name));

    private IEnumerable<TreeModel> TreeItems;

    IList<TreeModel> ExpandedNodes = new List<TreeModel>();

    private TreeModel selectedNode;

    public async Task OnValidSetValue()
    {
        if (Repo != null && Item != null && !string.IsNullOrEmpty(Item.Name))
        {
            await adminService.SetRepoMetaValue(Repo.Id, Item.Name, Item.Value);
            Repo = await listsService.GetRepositoryById(Id.ToString());
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Repo = await listsService.GetRepositoryById(Id.ToString());
        TreeItems = await listsService.GetRepositoryFoldersTree(Id);
    }

    protected override async Task OnInitializedAsync()
    {
        Fields = await listsService.GetMetaFieldsList();
    }

    protected override void OnInitialized()
    {
        ExpandedNodes.Add(TreeItems?.Skip(1).First());
        ExpandedNodes.Add(TreeItems?.Skip(1).Take(1).First().Childs.Skip(1).First());
    }
}

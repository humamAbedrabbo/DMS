@page "/doc/details/{id:int}"
@attribute [Authorize(Roles = "Admin, Archive, Public")]

@using DAS.ViewModels
@using DAS.Services
@using DAS.Models
@using MW.Blazor

@inject IAdminService adminService
@inject IListsService listsService
@inject IArchiveService arcService
@inject ICurrentUserService currentUserService
@inject IToastService toastService
@inject IJSRuntime JSRuntime;

@if (currentUser != null && Doc != null && (currentUser.IsAdmin || currentUser.Repositories.Contains(Doc.RepositoryId)))
{

    <div class="card text-left">
        <div class="jumbotron jumbotron-fluid">
            <div class="container-fluid">
                <h1 class="display-4">@LocalService.Get("Document Details", currentUser.Lang)</h1>
                <hr />
                <blockquote class="blockquote">
                    <p class="mb-0">@Doc.Title</p>
                    <footer class="blockquote-footer">
                        @LocalService.Get("created on", currentUser.Lang) @Doc.CreatedOn.ToString("dd-MM-yyyy")  <cite>@LocalService.Get("by", currentUser.Lang) @Doc.CreatedBy</cite>,  @LocalService.Get("last update on", currentUser.Lang) @Doc.UpdatedOn.ToString("dd-MM-yyyy hh:mm")  <cite>@LocalService.Get("by", currentUser.Lang) @Doc.UpdatedBy</cite>
                    </footer>
                </blockquote>
                <a class="btn btn-lg btn-primary mr-1" role="button" href="Archive/DownloadDocument?id=@Id">@LocalService.Get("Download", currentUser.Lang)</a>
                <AuthorizeView Roles="Admin, Archive">
                    @if (Doc.LastOperation == DocumentOperation.CheckedIn)
                    {
                        <button type="button" role="button" class="btn btn-lg btn-success mr-1" @onclick="Checkout">@LocalService.Get("Check Out", currentUser.Lang)</button>
                    }
                    else if (Doc.LastOperation == DocumentOperation.CheckedOut)
                    {
                        <a class="btn btn-lg btn-success mr-1" role="button" href="docs/checkin/@Doc.Id"> @LocalService.Get("Check In", currentUser.Lang)</a>
                        @*<a class="btn btn-lg btn-success mr-1" role="button" href="repos/Checkin?id=@Doc.Id"> @LocalService.Get("Check In", currentUser.Lang)</a>*@
                    }
                </AuthorizeView>
            </div>
        </div>
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-item nav-link active" id="nav-details-tab" data-toggle="tab" href="#nav-details" role="tab" aria-controls="nav-details" aria-selected="true">@LocalService.Get("Document Details", currentUser.Lang)</a>
                <a class="nav-item nav-link" id="nav-meta-tab" data-toggle="tab" href="#nav-meta" role="tab" aria-controls="nav-meta" aria-selected="false">@LocalService.Get("Meta Fields", currentUser.Lang)</a>
                <a class="nav-item nav-link" id="nav-history-tab" data-toggle="tab" href="#nav-history" role="tab" aria-controls="nav-history" aria-selected="false">@LocalService.Get("History", currentUser.Lang)</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-details" role="tabpanel" aria-labelledby="nav-details-tab">
                <div class="card">
                    <div class="card-body">
                        <div class="card-text">@Doc.Description</div>
                        <dl class="row">
                            <dt class="col-sm-3">@LocalService.Get("Document Name", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.Name</dd>
                            <dt class="col-sm-3">@LocalService.Get("Title", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.Title</dd>
                            <dt class="col-sm-3">@LocalService.Get("Repository", currentUser.Lang):</dt>
                            <dd class="col-sm-9"><a href="/repo/@Doc.RepositoryId">@Doc.Repository</a></dd>
                            <dt class="col-sm-3">@LocalService.Get("Parent Folder", currentUser.Lang):</dt>
                            <dd class="col-sm-9">
                                @if (Doc.ParentId.HasValue)
                                {
                                    <a href="/folders/@Doc.ParentId">@Doc.Parent</a>
                                }
                                else
                                {
                                    @Doc.Parent
                                }
                            </dd>
                            <dt class="col-sm-3">@LocalService.Get("Version", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.Version</dd>
                            <dt class="col-sm-3">@LocalService.Get("Content Type", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.ContentType</dd>
                            <dt class="col-sm-3">@LocalService.Get("Size", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.Length</dd>
                            <dt class="col-sm-3">@LocalService.Get("Last Operation", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.LastOperation.ToString()</dd>
                            <dt class="col-sm-3">@LocalService.Get("Operation On", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.OperationDate</dd>
                            <dt class="col-sm-3">@LocalService.Get("Operation By", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@Doc.OperationBy</dd>
                        </dl>
                    </div>
                </div>
            </div>
            <div class="tab-pane fade" id="nav-meta" role="tabpanel" aria-labelledby="nav-meta-tab">
                <div class="card mt-3 d-flex flex-grow-1 flex-column">
                    <div class="card-body">
                        <AuthorizeView Roles="Admin">
                            <div class="mb-2">
                                <EditForm Context="test" Model="Item" OnValidSubmit="OnValidSetValue">
                                    <div class="form-inline">
                                        <div class="form-group mb-2">
                                            <label for="id_name" class="sr-only"> @LocalService.Get("Field Name", currentUser.Lang)</label>
                                            <InputSelect @bind-Value="Item.Name" class="form-control" id="id_name">
                                                <option value=""></option>
                                                @if (Fields != null)
                                                    {
                                                        foreach (var group in Fields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                                        {
                                                        <optgroup label="@group">
                                                            @foreach (var field in Fields.Where(x => group == x.Group).OrderBy(x => x.Name))
                                                                {
                                                                <option value="@field.Name">@field.Title</option>
                                                                }
                                                        </optgroup>
                                                        }
                                                    }

                                            </InputSelect>
                                        </div>
                                        <div class="form-group mx-2 mb-2">
                                            <label for="id_value" class="sr-only"> @LocalService.Get("Field Value", currentUser.Lang)</label>
                                            @if (!string.IsNullOrEmpty(Item.Name) && Fields != null)
                                            {
                                                var field = Fields.FirstOrDefault(x => x.Name == Item.Name);
                                                if (field != null)
                                                {
                                                    if (field.FieldTag == "textarea")
                                                    {
                                                        <InputTextArea id="id_value" @bind-Value="@Item.Value" rows="3" class="form-control"></InputTextArea>
                                                    }
                                                    else if (field.FieldTag == "select")
                                                    {
                                                        <select id="id_value" @bind="Item.Value" class="form-control">@((MarkupString)field.FieldTagInputSelectItems)</select>
                                                    }
                                                    else
                                                    {
                                                        if (field.FieldFormat != null)
                                                        {
                                                            <input id="id_value" type="@field.FieldTagInputType" format-value="@field.FieldFormat" @bind="Item.Value" class="form-control" />
                                                        }
                                                        else
                                                        {
                                                            <input id="id_value" type="@field.FieldTagInputType" @bind="Item.Value" class="form-control" />
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <InputText @bind-Value="Item.Value" class="form-control" id="id_value" placeholder=" @LocalService.Get("Field Value", currentUser.Lang)"></InputText>
                                                }
                                            }

                                        </div>
                                        <button type="submit" class="btn btn-success mx-2 mb-2"> @LocalService.Get("Set Value", currentUser.Lang)</button>
                                    </div>
                                </EditForm>
                            </div>
                        </AuthorizeView>

                        @if (ActiveFields != null)
                        {
                            <table class="table table-bordered table-sm col-6">
                                <tbody>
                                    @foreach (var group in ActiveFields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                    {
                                        <tr class="bg-dark text-white d-flex">
                                            <td class="col-12">@group</td>
                                        </tr>
                                        @foreach (var meta in ActiveFields.Where(x => x.Group == group).OrderBy(x => x.Name))
                                        {
                                            <tr class="d-flex">
                                                <td class="bg-light col-6">@meta.Title</td>
                                                <td class="col-6">@Doc.Meta[meta.Name]</td>
                                            </tr>
                                        }

                                    }
                                </tbody>
                            </table>
                        }
                    </div>

                </div>

            </div>
            <div class="tab-pane fade" id="nav-history" role="tabpanel" aria-labelledby="nav-history-tab">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12">
                                <table class="table table-bordered">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th></th>
                                            <th>@LocalService.Get("Version", currentUser.Lang)</th>
                                            <th>@LocalService.Get("Operation", currentUser.Lang)</th>
                                            <th>@LocalService.Get("User", currentUser.Lang)</th>
                                            <th>@LocalService.Get("Date", currentUser.Lang)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Doc.History != null)
                                        {
                                            foreach (var h in Doc.History.OrderByDescending(e => e.OperationOn))
                                            {
                                                <tr>
                                                    <td>
                                                        @if (h.Operation == DocumentOperation.CheckedIn)
                                                        {
                                                            <a href="Archive/DownloadDocument?id=@h.DocumentId&version=@h.Version"><i class="oi oi-cloud-download"></i></a>
                                                        }
                                                    </td>
                                                    <td>@h.Version</td>
                                                    <td>@h.Operation.ToString()</td>
                                                    <td>@h.OperationBy</td>
                                                    <td>@h.OperationOn.ToString("dd/MM/yyyy HH:mm")</td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>


}



@code {

    [Parameter]
    public int Id { get; set; }

    private DocumentDetailModel Doc { get; set; } = new DocumentDetailModel();

    private AppUser currentUser;

    private MetaItemEditModel Item { get; set; } = new MetaItemEditModel();

    private IEnumerable<MetaField> Fields;

    private IEnumerable<MetaField> ActiveFields => Fields?.Where(x => Doc != null && Doc.Meta != null && Doc.Meta.ContainsKey(x.Name));

    public async Task Checkout()
    {
        DocumentCheckoutModel model = new DocumentCheckoutModel();
        model.DocumentId = Doc.Id;
        model.UserName = currentUser.UserName;
        var result = await arcService.Checkout(model);
        if (result.IsOk)
        {
            toastService.ShowSuccess($"Document '{Doc.Name}' checked out successfully");
            Doc = await listsService.GetDocumentById(Id, true);
        }
        else
        {
            toastService.ShowError($"Failed to check out document {Doc.Name}");
        }
    }

    public async Task OnValidSetValue()
    {
        if (Doc != null && Item != null && !string.IsNullOrEmpty(Item.Name))
        {
            await adminService.SetDocumentMetaValue(Doc.Id, Item.Name, Item.Value);
            Doc = await listsService.GetDocumentById(Id, true);
            Item = new MetaItemEditModel();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Doc = await listsService.GetDocumentById(Id, true);
    }

    protected override async Task OnInitializedAsync()
    {
        Fields = await listsService.GetMetaFieldsList();
        currentUser = await currentUserService.GetCurrentUserAsync();
    }
}

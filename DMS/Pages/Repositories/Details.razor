@page "/repo/details/{id:int}"

@using MW.Blazor
@using DMS.Models
@using DMS.ViewModels
@using DMS.Services

@inject IAdminService adminService
@inject IToastService toastService

<h3>Repository: @Repository?.Name</h3>
<div class="row d-flex flex-grow-1">
    <div class="col-4 d-flex flex-column flex-grow-1">
        <div class="d-flex flex-grow-1 flex-column">
            <div class="card d-flex flex-grow-1 flex-column">
                <div class="card-body">
                    <Tree Nodes="@Folders" ChildSelector="@(item => item.Childs)" @bind-SelectedNode="selectedNode" @bind-ExpandedNodes="ExpandedNodes" HasChildNodes="@(item => item.Childs?.Any() == true)">
                        <TitleTemplate>@context.Name</TitleTemplate>
                    </Tree>
                    <p style="margin-top: 2rem">
                        Selected: @selectedNode?.Name<br />
                        @*Expanded: @string.Join(", ", ExpandedNodes.Select(i => i.Name))<br />*@
                    </p>
                </div>
            </div>
        </div>

    </div>
    <div class="col-8">
        @if (selectedNode != null)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@selectedNode.Name</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@selectedNode.Description</h6>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">Cras justo odio</li>
                    <li class="list-group-item">Dapibus ac facilisis in</li>
                    <li class="list-group-item">Vestibulum at eros</li>
                </ul>
                <div class="card-body">
                    <EditForm Model="ChildFolder" OnValidSubmit="OnAddChildFolder">
                        <div class="form-inline">
                            <div class="form-group mb-2">
                                <label for="inputName" class="sr-only">Folder Name</label>
                                <InputText @bind-Value="ChildFolder.Name" class="form-control" id="inputName" placeholder="Folder Name"></InputText>
                                <InputNumber @bind-Value="ChildFolder.ParentId" class="form-control" id="inputName1" ></InputNumber>
                                <InputNumber @bind-Value="ChildFolder.RepositoryId" class="form-control" id="inputName2" ></InputNumber>
                            </div>
                            <div class="form-group mx-sm-3 mb-2">
                                <label for="inputDesc" class="sr-only">Description</label>
                                <InputText @bind-Value="ChildFolder.Description" class="form-control" id="inputDesc" placeholder="Description"></InputText>
                            </div>

                            <button type="submit" class="btn btn-success mb-2">Add Child Folder</button>
                        </div>
                    </EditForm>

                </div>
            </div>
        }

    </div>
</div>


@code {

    [Parameter]
    public int Id { get; set; }

    public Repository Repository { get; set; }

    public CreateFolderModel ChildFolder { get; set; } = new CreateFolderModel();

    IEnumerable<Folder> Folders;

    IList<Folder> ExpandedNodes = new List<Folder>();


    private Folder selectedNode;

    protected override void OnInitialized()
    {
        ExpandedNodes.Add(Folders?.Skip(1).First());
        ExpandedNodes.Add(Folders?.Skip(1).Take(1).First().Childs.Skip(1).First());
    }

    protected override async Task OnInitializedAsync()
    {

        await LoadRepository();
    }

    public async Task LoadRepository()
    {
        ChildFolder = new CreateFolderModel();
        Repository = await adminService.GetRepositoryByIdWithFolderTreeAsync(Id);
        Folders = Repository.Folders;
        
    }

    public async Task OnAddChildFolder()
    {
        ChildFolder.ParentId = selectedNode.Id;
        ChildFolder.RepositoryId = selectedNode.RepositoryId;
        CreateFolderModel model = new CreateFolderModel();
        model.Name = ChildFolder.Name;
        model.Description = ChildFolder.Description;
        model.RepositoryId = Repository.Id;
        model.ParentId = ChildFolder.ParentId;

        var folder = await adminService.AddFolderAsync(model);
        if (folder != null)
        {
            toastService.ShowSuccess($"Folder '{ChildFolder.Name}' added successfully");
            await LoadRepository();

        }
        else
        {
            toastService.ShowError($"Failed to add folder '{ChildFolder.Name}'");
        }
    }

}

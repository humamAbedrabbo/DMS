@page "/folders/{id:int}"
@attribute [Authorize(Roles = "Admin, Archive, Public")]

@using DAS.ViewModels
@using DAS.Services
@using DAS.Models
@using MW.Blazor

@inject IAdminService adminService
@inject IListsService listsService
@inject IArchiveService arcService
@inject ICurrentUserService currentUserService
@inject IToastService toastService
@inject IJSRuntime JSRuntime;

@if (currentUser != null && CurrentFolder != null && (currentUser.IsAdmin || currentUser.Repositories.Contains(CurrentFolder.RepositoryId)))
{
    <div class="card text-left">
        <div class="jumbotron jumbotron-fluid">
            <div class="container-fluid">
                <h1 class="display-4">@LocalService.Get("Folder Details", currentUser.Lang)</h1>
                <hr />
                <blockquote class="blockquote">
                    <p class="mb-0">@CurrentFolder.Title</p>
                    <footer class="blockquote-footer">
                        @LocalService.Get("created on", currentUser.Lang) @CurrentFolder.CreatedOn.ToString("dd-MM-yyyy")  <cite>@LocalService.Get("by", currentUser.Lang) @CurrentFolder.CreatedBy</cite>,  @LocalService.Get("last update on", currentUser.Lang) @CurrentFolder.UpdatedOn.ToString("dd-MM-yyyy hh:mm")  <cite>@LocalService.Get("by", currentUser.Lang) @CurrentFolder.UpdatedBy</cite>
                    </footer>
                </blockquote>
                <AuthorizeView Roles="Admin">
                    <button type="button" class="btn btn-lg btn-primary" role="button" data-toggle="modal" data-target="#dlg_AddFolder">@LocalService.Get("Add Folder", currentUser.Lang)</button>
                </AuthorizeView>
                <AuthorizeView Roles="Admin, Archive">
                    @*<a href="/repos/upload?repoId=@CurrentFolder.RepositoryId&folderId=@CurrentFolder.Id" class="btn btn-secondary"> @LocalService.Get("Upload", currentUser.Lang)</a>*@
                    <a href="/docs/upload/@CurrentFolder.RepositoryId/@CurrentFolder.Id" role="button" class="btn btn-lg btn-success">@LocalService.Get("Upload", currentUser.Lang)</a>
                </AuthorizeView>

            </div>
        </div>
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-item nav-link active" id="nav-details-tab" data-toggle="tab" href="#nav-details" role="tab" aria-controls="nav-details" aria-selected="true">@LocalService.Get("Folder Details", currentUser.Lang)</a>
                <a class="nav-item nav-link" id="nav-meta-tab" data-toggle="tab" href="#nav-meta" role="tab" aria-controls="nav-meta" aria-selected="false">@LocalService.Get("Meta Fields", currentUser.Lang)</a>
                <a class="nav-item nav-link" id="nav-folders-tab" data-toggle="tab" href="#nav-folders" role="tab" aria-controls="nav-folders" aria-selected="false">@LocalService.Get("Folders Tree", currentUser.Lang)</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-details" role="tabpanel" aria-labelledby="nav-details-tab">
                <div class="card">
                    <div class="card-body">

                        <dl class="row">
                            <dt class="col-sm-3">@LocalService.Get("Folder Name", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@CurrentFolder.Name</dd>
                            <dt class="col-sm-3">@LocalService.Get("Title", currentUser.Lang):</dt>
                            <dd class="col-sm-9">@CurrentFolder.Title</dd>
                            <dt class="col-sm-3">@LocalService.Get("Repository", currentUser.Lang):</dt>
                            <dd class="col-sm-9"><a href="/folders/@CurrentFolder.RepositoryId">@CurrentFolder.Repository</a></dd>
                            <dt class="col-sm-3">@LocalService.Get("Parent Folder", currentUser.Lang):</dt>
                            <dd class="col-sm-9"><a href="/folders/@CurrentFolder.ParentId">@CurrentFolder.Parent</a></dd>
                        </dl>

                    </div>

                </div>
            </div>
            <div class="tab-pane fade" id="nav-meta" role="tabpanel" aria-labelledby="nav-meta-tab">
                <div class="card d-flex flex-grow-1 flex-column">
                    <div class="card-body">

                        <AuthorizeView Roles="Admin">
                            <div class="mb-2">
                                <EditForm Context="formMetaContext" Model="Item" OnValidSubmit="OnValidSetValue">
                                    <div class="form-inline">
                                        <div class="form-group mb-2">
                                            <label for="id_name" class="sr-only"> @LocalService.Get("Field Name", currentUser.Lang)</label>
                                            <InputSelect @bind-Value="Item.Name" class="form-control" id="id_name">
                                                <option value=""></option>
                                                @if (Fields != null)
                                                    {
                                                        foreach (var group in Fields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                                        {
                                                        <optgroup label="@group">
                                                            @foreach (var field in Fields.Where(x => group == x.Group).OrderBy(x => x.Name))
                                                                {
                                                                <option value="@field.Name">@field.Title</option>
                                                                }
                                                        </optgroup>
                                                        }
                                                    }
                                            </InputSelect>
                                        </div>
                                        <div class="form-group mb-2">
                                            <label for="id_value" class="sr-only"> @LocalService.Get("Field Value", currentUser.Lang)</label>
                                            <InputText @bind-Value="Item.Value" class="form-control" id="id_value" placeholder="Field Value"></InputText>
                                        </div>
                                        <button type="submit" class="btn btn-success mx-2 mb-2"> @LocalService.Get("Set Value", currentUser.Lang)</button>
                                    </div>
                                </EditForm>
                            </div>

                        </AuthorizeView>
                        @if (ActiveFields != null)
                        {
                            <table class="table table-bordered table-sm col-6">
                                <tbody>
                                    @foreach (var group in ActiveFields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                    {
                                        <tr class="bg-dark text-white d-flex">
                                            <td class="col-12">@group</td>
                                        </tr>
                                        @foreach (var meta in ActiveFields.Where(x => x.Group == group).OrderBy(x => x.Name))
                                        {
                                            <tr class="d-flex">
                                                <td class="bg-light col-6">@meta.Title</td>
                                                <td class="col-6">@CurrentFolder.Meta[meta.Name]</td>
                                            </tr>
                                        }

                                    }
                                </tbody>
                            </table>
                        }
                    </div>

                </div>
            </div>
            <div class="tab-pane fade" id="nav-folders" role="tabpanel" aria-labelledby="nav-folders-tab">
                <div class="card d-flex flex-grow-1 flex-column">
                    <div class="card-body">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="repo/@CurrentFolder?.RepositoryId">@CurrentFolder?.Repository</a></li>
                                @if (CurrentFolder.ParentId.HasValue)
                                {
                                    <li class="breadcrumb-item"><a href="folders/@CurrentFolder?.ParentId.Value">@CurrentFolder?.Parent</a></li>
                                }
                                <li class="breadcrumb-item active" aria-current="page">@CurrentFolder?.Name</li>
                            </ol>
                        </nav>
                        @if (TreeItems != null)
                        {
                            <Tree Nodes="@TreeItems" ChildSelector="@(item => item.Childs?.OrderBy(x => x.Type))" @bind-SelectedNode="selectedNode" @bind-ExpandedNodes="ExpandedNodes" HasChildNodes="@(item => item.Childs?.Any() == true)">
                                <TitleTemplate>
                                    @if (context.Type == TreeNodeType.Folder)
                                            {
                                        <i class="oi oi-folder mr-1" style="color: darkorange;"></i>
                                            }
                                            else
                                            {
                                        <i class="oi oi-file mr-1"></i>
                                            }
                                    <a href="@context.Url">@context.Name</a>
                                </TitleTemplate>
                            </Tree>

                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="dlg_AddFolder" tabindex="-1" role="dialog" aria-labelledby="dlg_AddFolderLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">

            <div class="modal-content">
                <EditForm Model="FolderAddModel" OnValidSubmit="OnValidSubmitFolder">
                    <div class="modal-header">
                        <h5 class="modal-title" id="dlg_AddFolderLabel"> @LocalService.Get("Add Folder", currentUser.Lang)</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="id_fld_name"> @LocalService.Get("Folder Name", currentUser.Lang)</label>
                            <InputText @bind-Value="FolderAddModel.Name" id="id_fld_name" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="id_fld_title"> @LocalService.Get("Title", currentUser.Lang)</label>
                            <InputText @bind-Value="FolderAddModel.Title" id="id_fld_title" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="id_fld_desc"> @LocalService.Get("Description", currentUser.Lang)</label>
                            <InputTextArea @bind-Value="FolderAddModel.Description" id="id_fld_desc" class="form-control"></InputTextArea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal"> @LocalService.Get("Close", currentUser.Lang)</button>
                        <button type="submit" class="btn btn-primary"> @LocalService.Get("Save", currentUser.Lang)</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private FolderDetailModel CurrentFolder { get; set; } = new FolderDetailModel();

    private MetaItemEditModel Item { get; set; } = new MetaItemEditModel();

    private FolderAddModel FolderAddModel { get; set; } = new FolderAddModel();

    private IEnumerable<MetaField> Fields;

    private IEnumerable<MetaField> ActiveFields => Fields?.Where(x => CurrentFolder != null && CurrentFolder.Meta != null && CurrentFolder.Meta.ContainsKey(x.Name));

    private IEnumerable<TreeModel> TreeItems;

    IList<TreeModel> ExpandedNodes = new List<TreeModel>();

    private TreeModel selectedNode;

    private AppUser currentUser;

    public async Task OnValidSetValue()
    {
        if (CurrentFolder != null && Item != null && !string.IsNullOrEmpty(Item.Name))
        {
            await adminService.SetFolderMetaValue(CurrentFolder.Id, Item.Name, Item.Value);
            CurrentFolder = await listsService.GetFolderById(Id);
            Item = new MetaItemEditModel();
        }
    }

    public async Task OnValidSubmitFolder()
    {
        FolderAddModel.RepositoryId = CurrentFolder.RepositoryId.ToString();
        FolderAddModel.ParentId = CurrentFolder.Id;
        FolderAddModel.UserName = currentUser.UserName;

        var folder = await arcService.AddFolder(FolderAddModel);
        if (folder != null)
        {
            toastService.ShowSuccess($"Folder '{folder.Name}' created successfully");
            FolderAddModel = new FolderAddModel();
            await LoadTree();
        }
        else
        {
            toastService.ShowError($"Failed to create folder '{FolderAddModel.Name}'");
        }
        // $('#myModal').modal('show')
        await JSRuntime.InvokeVoidAsync("closeDialog", "#dlg_AddFolder");
    }

    protected override async Task OnParametersSetAsync()
    {
        currentUser = await currentUserService.GetCurrentUserAsync();
        CurrentFolder = await listsService.GetFolderById(Id);
        await LoadTree();
    }

    protected override async Task OnInitializedAsync()
    {
        Fields = await listsService.GetMetaFieldsList();
    }

    protected override void OnInitialized()
    {
        ExpandedNodes.Add(TreeItems?.Skip(1).First());
        ExpandedNodes.Add(TreeItems?.Skip(1).Take(1).First().Childs.Skip(1).First());
    }

    private async Task LoadTree()
    {
        TreeItems = await listsService.GetTree(CurrentFolder.RepositoryId, Id);
    }
}

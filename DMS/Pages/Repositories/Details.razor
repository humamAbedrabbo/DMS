@page "/repo/{id:int}"
@attribute [Authorize(Roles = "Admin, Archive")]

@using DAS.ViewModels
@using DAS.Services
@using DAS.Models
@using MW.Blazor

@inject IAdminService adminService
@inject IListsService listsService
@inject IArchiveService arcService
@inject ICurrentUserService currentUserService
@inject IToastService toastService
@inject IJSRuntime JSRuntime;

@if (currentUser != null && (currentUser.IsAdmin || currentUser.Repositories.Contains(Id)))
{
    <h3> @LocalService.Get("Repository", currentUser.Lang): @Repo.Name</h3>
    <small class="text-secondary font-italic"> @LocalService.Get("created on", currentUser.Lang) @Repo.CreatedOn.ToString("dd-MM-yyyy")  @LocalService.Get("by", currentUser.Lang) @Repo.CreatedBy,  @LocalService.Get("last update on", currentUser.Lang) @Repo.UpdatedOn.ToString("dd-MM-yyyy hh:mm")  @LocalService.Get("by", currentUser.Lang) @Repo.UpdatedBy</small>

    <div class="row">
        <div class="col-6">
            <div class="card">
                <div class="card-body">
                    <div class="card-title"><h5>@Repo.Title</h5></div>
                    <div class="card-text">@Repo.Description</div>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item"> @LocalService.Get("Storage", currentUser.Lang): <span class="font-weight-bold">@Repo.Storage.ToString()</span></li>
                </ul>
                <AuthorizeView Roles="Admin">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#id_AddFolder"> @LocalService.Get("Add Folder", currentUser.Lang)</button>
                    </div>
                </AuthorizeView>

            </div>
        </div>
    </div>

    <div class="row mt-3 d-flex flex-grow-1">
        <div class="col-6 d-flex flex-column flex-grow-1">
            <div class="card d-flex flex-grow-1 flex-column">
                <div class="card-body">
                    <div class="card-title"><h5> @LocalService.Get("Meta Fields", currentUser.Lang)</h5></div>
                    <AuthorizeView Roles="Admin">
                        <div class="mb-2">
                            <EditForm Context="test" Model="Item" OnValidSubmit="OnValidSetValue">
                                <div class="form-inline">
                                    <div class="form-group mx-sm-3 mb-2">
                                        <label for="id_name" class="sr-only"> @LocalService.Get("Field Name", currentUser.Lang)</label>
                                        <InputSelect @bind-Value="Item.Name" class="form-control" id="id_name">
                                            @if (Fields == null)
                                                {
                                                <option></option>
                                                }
                                                else
                                                {
                                                    foreach (var group in Fields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                                    {
                                                    <optgroup label="@group">
                                                        @foreach (var field in Fields.Where(x => group == x.Group).OrderBy(x => x.Name))
                                                            {
                                                            <option value="@field.Name">@field.Title</option>
                                                            }


                                                    </optgroup>
                                                    }
                                                }

                                        </InputSelect>
                                    </div>
                                    <div class="form-group mb-2">
                                        <label for="id_value" class="sr-only"> @LocalService.Get("Field Value", currentUser.Lang)</label>
                                        <InputText @bind-Value="Item.Value" class="form-control" id="id_value" placeholder=" @LocalService.Get("Field Value", currentUser.Lang)"></InputText>
                                    </div>
                                    <button type="submit" class="btn btn-success mx-2 mb-2"> @LocalService.Get("Set Value", currentUser.Lang)</button>
                                </div>
                            </EditForm>
                        </div>
                    </AuthorizeView>

                    @if (ActiveFields != null)
                    {
                        <table class="table table-bordered table-sm col-6">
                            <tbody>
                                @foreach (var group in ActiveFields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                {
                                    <tr class="bg-dark text-white d-flex">
                                        <td class="col-12">@group</td>
                                    </tr>
                                    @foreach (var meta in ActiveFields.Where(x => x.Group == group).OrderBy(x => x.Name))
                                    {
                                        <tr class="d-flex">
                                            <td class="bg-light col-6">@meta.Title</td>
                                            <td class="col-6">@Repo.Meta[meta.Name]</td>
                                        </tr>
                                    }

                                }
                            </tbody>
                        </table>
                    }
                </div>

            </div>

        </div>
        <div class="col-6 d-flex flex-column flex-grow-1">
            <div class="card d-flex flex-grow-1 flex-column">
                <div class="card-body">
                    <div class="card-title"><h5> @LocalService.Get("Folders", currentUser.Lang)</h5></div>
                    @if (TreeItems != null)
                    {
                        <Tree Nodes="@TreeItems" ChildSelector="@(item => item.Childs)" @bind-SelectedNode="selectedNode" @bind-ExpandedNodes="ExpandedNodes" HasChildNodes="@(item => item.Childs?.Any() == true)">
                            <TitleTemplate>
                                <i class="oi oi-folder mr-1" style="color: darkorange;"></i>
                                <a href="@context.Url">@context.Name</a>
                            </TitleTemplate>
                        </Tree>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="id_AddFolder" tabindex="-1" role="dialog" aria-labelledby="label_AddFolder" aria-hidden="true">
        <div class="modal-dialog" role="document">

            <div class="modal-content">
                <EditForm Model="FolderAddModel" OnValidSubmit="OnValidSubmitFolder">
                    <div class="modal-header">
                        <h5 class="modal-title" id="label_AddFolder"> @LocalService.Get("Add Folder", currentUser.Lang)</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="id_fld_name"> @LocalService.Get("Folder Name", currentUser.Lang)</label>
                            <InputText @bind-Value="FolderAddModel.Name" id="id_fld_name" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="id_fld_title"> @LocalService.Get("Title", currentUser.Lang)</label>
                            <InputText @bind-Value="FolderAddModel.Title" id="id_fld_title" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="id_fld_desc"> @LocalService.Get("Description", currentUser.Lang)</label>
                            <InputTextArea @bind-Value="FolderAddModel.Description" id="id_fld_desc" class="form-control"></InputTextArea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal"> @LocalService.Get("Close", currentUser.Lang)</button>
                        <button type="submit" class="btn btn-primary"> @LocalService.Get("Save", currentUser.Lang)</button>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
}





@code {

    [Parameter]
    public int Id { get; set; }

    private RepoDetailModel Repo { get; set; } = new RepoDetailModel();

    private FolderAddModel FolderAddModel { get; set; } = new FolderAddModel();

    private MetaItemEditModel Item { get; set; } = new MetaItemEditModel();

    private AppUser currentUser;

    private IEnumerable<MetaField> Fields;

    private IEnumerable<MetaField> ActiveFields => Fields?.Where(x => Repo != null && Repo.Meta != null && Repo.Meta.ContainsKey(x.Name));

    private IEnumerable<TreeModel> TreeItems;

    IList<TreeModel> ExpandedNodes = new List<TreeModel>();

    private TreeModel selectedNode;

    public async Task OnValidSetValue()
    {
        if (Repo != null && Item != null && !string.IsNullOrEmpty(Item.Name))
        {
            await adminService.SetRepoMetaValue(Repo.Id, Item.Name, Item.Value);
            Repo = await listsService.GetRepositoryById(Id.ToString());
        }
    }

    public async Task OnValidSubmitFolder()
    {
        FolderAddModel.RepositoryId = Repo.Id.ToString();
        FolderAddModel.ParentId = null;
        FolderAddModel.UserName = currentUser.UserName;

        var folder = await arcService.AddFolder(FolderAddModel);
        if (folder != null)
        {
            toastService.ShowSuccess($"Folder '{folder.Name}' created successfully");
            await LoadTree();
        }
        else
        {
            toastService.ShowError($"Failed to create folder '{FolderAddModel.Name}'");
        }
        // $('#myModal').modal('show')
        await JSRuntime.InvokeVoidAsync("closeDialog", "#id_AddFolder");
    }

    protected override async Task OnParametersSetAsync()
    {
        currentUser = await currentUserService.GetCurrentUserAsync();
        Repo = await listsService.GetRepositoryById(Id.ToString());

        // TreeItems = await listsService.GetRepositoryFoldersTree(Repo.Id);
        await LoadTree();
    }

    protected override async Task OnInitializedAsync()
    {
        Fields = await listsService.GetMetaFieldsList();

    }

    protected override void OnInitialized()
    {
        ExpandedNodes.Add(TreeItems?.Skip(1).First());
        ExpandedNodes.Add(TreeItems?.Skip(1).Take(1).First().Childs.Skip(1).First());
    }

    private async Task LoadTree()
    {
        TreeItems = await listsService.GetRepositoryFoldersTree(Id);
    }

}

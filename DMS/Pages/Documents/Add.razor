@page "/docs/add/{id:int}"

@using MW.Blazor
@using DMS.Models
@using DMS.ViewModels
@using DMS.Services

@inject IAdminService adminService
@inject IToastService toastService

<div class="row d-flex flex-grow-1">
    <div class="col-4 d-flex flex-column flex-grow-1">
        <div class="d-flex flex-grow-1 flex-column">
            <div class="card d-flex flex-grow-1 flex-column">
                <div class="card-body">
                    <Tree Nodes="@Folders" ChildSelector="@(item => item.Childs)" @bind-SelectedNode="selectedNode" @bind-ExpandedNodes="ExpandedNodes" HasChildNodes="@(item => item.Childs?.Any() == true)">
                        <TitleTemplate>@context.Name</TitleTemplate>
                    </Tree>
                    <p style="margin-top: 2rem">
                        Selected: @selectedNode?.Name<br />
                        @*Expanded: @string.Join(", ", ExpandedNodes.Select(i => i.Name))<br />*@
                    </p>
                </div>
            </div>
        </div>

    </div>
    <div class="col-6">
        @if (selectedNode != null)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add Document</h5>

                    <EditForm Model="CreateDocumentModel" OnValidSubmit="OnAddDocument">
                        <div class="form-group">
                            <label>Document Name</label>
                            <InputText @bind-Value="@CreateDocumentModel.Name" class="form-control"></InputText>
                        </div>
                        <div class="form-group">
                            <label>Folder</label>
                            <input readonly value="@selectedNode.Name" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label>Description</label>
                            <InputTextArea @bind-Value="@CreateDocumentModel.Description" class="form-control"></InputTextArea>
                        </div>
                        <button type="submit" class="btn btn-primary mr-1">Add Document</button>
                    </EditForm>
                </div>
            </div>
        }

    </div>
    <div class="col-2">
        <div class="card">
            <div class="card-body">
                <div class="card-title">Recent Documents</div>
                @if (RecentDocuments.Count == 0)
                {
                    <p class="text-muted font-italic">Empty</p>
                }
            </div>
            @if (RecentDocuments.Count > 0)
            {
            <ul class="list-group list-group-flush">
                @foreach (var doc in RecentDocuments)
                {
                <li class="list-group-item list-group-item-action">
                    <small class="font-italic">@GetTimeAgo(doc.CreatedOn)</small>
                    <p class="mb-1">@doc.Name</p>
                </li>
                }
            </ul>
            }
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public int Id { get; set; }

    public Repository Repository { get; set; }

    public CreateDocumentModel CreateDocumentModel { get; set; } = new CreateDocumentModel();

    Stack<Document> RecentDocuments = new Stack<Document>();

    IEnumerable<Folder> Folders;

    IList<Folder> ExpandedNodes = new List<Folder>();


    private Folder selectedNode;

    protected override void OnInitialized()
    {
        ExpandedNodes.Add(Folders?.Skip(1).First());
        ExpandedNodes.Add(Folders?.Skip(1).Take(1).First().Childs.Skip(1).First());
    }

    protected override async Task OnInitializedAsync()
    {

        Repository = await adminService.GetRepositoryByIdWithFolderTreeAsync(Id).ConfigureAwait(false);
        Folders = Repository.Folders;


    }

    public string GetTimeAgo(DateTime dt)
    {
        var ts = DateTime.Now - dt;
        if (ts.TotalSeconds <= 1)
            return "1 sec ago";
        else if (ts.Minutes < 1)
            return $"{ts.Seconds} sec ago";
        else
        {
            return $"{ts.TotalMinutes} min ago";
        }
        
    }

    public async Task OnAddDocument()
    {
        try
        {
            CreateDocumentModel.FolderId = selectedNode.Id;
            CreateDocumentModel.RepositoryId = selectedNode.RepositoryId;
            var doc = await adminService.AddDocumentAsync(CreateDocumentModel).ConfigureAwait(false);
            if (doc != null)
            {
                toastService.ShowSuccess($"Document '{CreateDocumentModel.Name}' added successfully");

                RecentDocuments.Push(doc);
            }
            else
            {
                toastService.ShowError($"Failed to add document '{CreateDocumentModel.Name}'");
            }
        }
        catch (DMS.Exceptions.DmsException ex)
        {
            toastService.ShowError($"Failed to add document '{CreateDocumentModel.Name}'. {ex.Message}");
        }

        CreateDocumentModel = new CreateDocumentModel();
    }
}
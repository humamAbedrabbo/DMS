@page "/repo/edit/{id:int}"
@attribute [Authorize(Roles = "Admin")]

@using DAS.ViewModels
@using DAS.Services
@using DAS.Models

@inject IAdminService adminService
@inject IListsService listsService
@inject IArchiveService arcService
@inject ICurrentUserService currentUserService
@inject IToastService toastService
@inject IJSRuntime JSRuntime;
@inject NavigationManager navMgr



@if (currentUser != null)
{
    <div class="card text-left">
        <div class="jumbotron jumbotron-fluid">
            <div class="container-fluid">
                <h1 class="display-4">@LocalService.Get("Repository", currentUser.Lang) @Repo.Name</h1>
                <h4>(@Repo.Title)</h4>
                <hr />
                <blockquote class="blockquote">
                    <p class="mb-0">@Repo.Description</p>
                    <footer class="blockquote-footer">
                        @LocalService.Get("created on", currentUser.Lang) @Repo.CreatedOn.ToString("dd-MM-yyyy")  <cite>@LocalService.Get("by", currentUser.Lang) @Repo.CreatedBy</cite>,  @LocalService.Get("last update on", currentUser.Lang) @Repo.UpdatedOn.ToString("dd-MM-yyyy hh:mm")  <cite>@LocalService.Get("by", currentUser.Lang) @Repo.UpdatedBy</cite>
                    </footer>
                </blockquote>
            </div>
        </div>
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-item nav-link active" id="nav-edit-tab" data-toggle="tab" href="#nav-edit" role="tab" aria-controls="nav-edit" aria-selected="true">@LocalService.Get("Edit Repository", currentUser.Lang)</a>
                <a class="nav-item nav-link" id="nav-meta-tab" data-toggle="tab" href="#nav-meta" role="tab" aria-controls="nav-meta" aria-selected="false">@LocalService.Get("Meta Fields", currentUser.Lang)</a>

            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-edit" role="tabpanel" aria-labelledby="nav-edit-tab">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="RepoUpdateModel" OnValidSubmit="OnValidSubmitRepository" class="my-3">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="id_title"> @LocalService.Get("Title", currentUser.Lang)</label>
                                <InputText @bind-Value="RepoUpdateModel.Title" class="form-control" id="id_title"></InputText>
                                <ValidationMessage For="@(() => RepoUpdateModel.Title)" />
                            </div>
                            <div class="form-group">
                                <label for="id_desc"> @LocalService.Get("Description", currentUser.Lang)</label>
                                <InputTextArea @bind-Value="RepoUpdateModel.Description" class="form-control" id="id_desc"></InputTextArea>
                                <ValidationMessage For="@(() => RepoUpdateModel.Description)" />
                            </div>
                            <a class="btn btn-secondary mr-1" href="repos"> @LocalService.Get("Close", currentUser.Lang)</a>
                            <button class="btn btn-primary" type="submit"> @LocalService.Get("Save", currentUser.Lang)</button>
                        </EditForm>
                    </div>

                </div>
            </div>
            <div class="tab-pane fade" id="nav-meta" role="tabpanel" aria-labelledby="nav-meta-tab">
                <div class="card">
                    <div class="card-body">

                        <EditForm Context="test" Model="Item" OnValidSubmit="OnValidSetValue">
                            <div class="form-inline">
                                <div class="form-group mb-2">
                                    <label for="id_name" class="sr-only"> @LocalService.Get("Field Name", currentUser.Lang)</label>
                                    <InputSelect @bind-Value="Item.Name" class="form-control" id="id_name">
                                        <option value=""></option>
                                        @if (Fields != null)
                                        {
                                            foreach (var group in Fields.Select(x => x.Group).Distinct().OrderBy(x => x))
                                            {
                                                <optgroup label="@group">
                                                    @foreach (var field in Fields.Where(x => group == x.Group).OrderBy(x => x.Name))
                                                    {
                                                        <option value="@field.Name">@field.Title</option>
                                                    }

                                                </optgroup>
                                            }
                                        }

                                    </InputSelect>
                                </div>
                                <div class="form-group mb-2">
                                    <label for="id_value" class="sr-only"> @LocalService.Get("Field Value", currentUser.Lang)</label>
                                    <InputText @bind-Value="Item.Value" class="form-control" id="id_value" placeholder=" @LocalService.Get("Field Value", currentUser.Lang)"></InputText>
                                </div>
                                <button type="submit" class="btn btn-success mx-2 mb-2"> @LocalService.Get("Set Value", currentUser.Lang)</button>
                            </div>
                        </EditForm>

                        <table class="table table-bordered table-sm col-6 mt-2">
                            <tbody>
                                @foreach (var group in ActiveFields?.Select(x => x.Group).Distinct().OrderBy(x => x))
                                {
                                    <tr class="bg-dark text-white d-flex">
                                        <td class="col-12">@group</td>
                                    </tr>
                                    @foreach (var meta in ActiveFields?.Where(x => x.Group == group).OrderBy(x => x.Name))
                                    {
                                        <tr class="d-flex">
                                            <td class="bg-light col-6">@meta.Title</td>
                                            <td class="col-6">@Repo.Meta[meta.Name]</td>
                                        </tr>
                                    }

                                }
                            </tbody>
                        </table>

                    </div>

                </div>
            </div>

        </div>

    </div>
}



@code {

    [Parameter]
    public int Id { get; set; }

    private RepoDetailModel Repo { get; set; } = new RepoDetailModel();
    public RepoUpdateModel RepoUpdateModel { get; set; } = new RepoUpdateModel();
    private MetaItemEditModel Item { get; set; } = new MetaItemEditModel();
    private AppUser currentUser;
    private IEnumerable<MetaField> Fields;

    private IEnumerable<MetaField> ActiveFields => Fields?.Where(x => Repo != null && Repo.Meta != null && Repo.Meta.ContainsKey(x.Name));

    public async Task OnValidSetValue()
    {
        if (Repo != null && Item != null && !string.IsNullOrEmpty(Item.Name))
        {
            await adminService.SetRepoMetaValue(Repo.Id, Item.Name, Item.Value);
            Repo = await listsService.GetRepositoryById(Id.ToString());
        }
        StateHasChanged();
    }

    public async Task OnValidSubmitRepository()
    {
        RepoUpdateModel.UserName = currentUser.UserName;

        try
        {
            await adminService.UpdateRepository(Repo.Id.ToString(), RepoUpdateModel);
            toastService.ShowSuccess($"Repository '{Repo.Name}' updated successfully");
            navMgr.NavigateTo("repos");
        }
        catch
        {
            toastService.ShowError($"Failed to update repository '{Repo.Name}'");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Repo = await listsService.GetRepositoryById(Id.ToString());
        RepoUpdateModel.Title = Repo.Title;
        RepoUpdateModel.Description = Repo.Description;
        if (Repo.Meta != null)
        {
            RepoUpdateModel.Meta = new Dictionary<string, string>();
            foreach (var meta in Repo.Meta)
            {
                RepoUpdateModel.Meta[meta.Key] = meta.Value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Fields = await listsService.GetMetaFieldsList();
        currentUser = await currentUserService.GetCurrentUserAsync();
        RepoUpdateModel.UserName = currentUser.UserName;
    }
}
